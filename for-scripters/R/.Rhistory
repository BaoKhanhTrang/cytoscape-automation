plot(factor(row.names(disease.score.table)),disease.score.table[,1], ylab=colnames(disease.score.table)[1])
summary(disease.score.table)
top.quart <- quantile(disease.score.table[,1], 0.75)
top.nodes <- row.names(disease.score.table)[which(disease.score.table[,1]>top.quart)]
createSubnetwork(top.nodes)
renameNetwork('top disease quartile')
createSubnetwork(edges='all')  #handy way to exclude unconnected nodes!
renameNetwork('top disease quartile connected')
setCurrentNetwork("String Network - ovarian cancer")
top.nodes <- row.names(disease.score.table)[tail(order(disease.score.table[,1]),3)]
selectNodes(top.nodes)
selectFirstNeighbors()
createSubnetwork('selected') # selected nodes, all connecting edges (default)
renameNetwork('top disease neighbors')
setCurrentNetwork("String Network - ovarian cancer")
selectNodes(top.nodes)
commandRun('diffusion diffuse') # diffusion!
createSubnetwork('selected')
applyLayout('force-directed')
renameNetwork('top disease diffusion')
load("data/tutorial-ovc-expr-mean-dataset.robj")
load("data/tutorial-ovc-mut-dataset.robj")
load("data/tutorial-brc-expr-mean-dataset.robj")
load("data/tutorial-brc-mut-dataset.robj")
str(brc.expr)  # gene names in row.names of data.frame
str(brc.mut)  # gene names in column named 'Hugo_Symbol'
setCurrentNetwork("String Network - breast cancer")
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
?loadTableData
loadTableData(brc.expr)  #default data.frame key is row.names
loadTableData(brc.mut,'Hugo_Symbol')  #specify column name if not default
style.name = "dataStyle"
defaults.list <- list(NODE_SHAPE="ellipse",
NODE_SIZE=60,
NODE_FILL_COLOR="#AAAAAA",
EDGE_TRANSPARENCY=120)
node.label.map <- mapVisualProperty('node label','name','p') # p for passthrough; nothing else needed
createStyle(style.name, defaults.list, list(node.label.map))
applyStyle(style.name)
brc.expr.network = getTableColumns('node','expr.mean')
min.brc.expr = min(brc.expr.network[,1],na.rm=TRUE)
max.brc.expr = max(brc.expr.network[,1],na.rm=TRUE)
data.values = c(min.brc.expr,0,max.brc.expr)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
node.fill.map <- mapVisualProperty('node fill color', 'expr.mean','c',data.values,node.colors)
updateStyleMapping(style.name, node.fill.map)
brc.mut.network = getTableColumns('node','mut_count')
min.brc.mut = min(brc.mut.network[,1],na.rm=TRUE)
max.brc.mut = max(brc.mut.network[,1],na.rm=TRUE)
data.values = c(min.brc.mut,20,max.brc.mut)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="seq")
border.colors <- c(brewer.pal(3, "Reds"))
node.border.map <- mapVisualProperty('node border paint','mut_count','c',data.values,border.colors)
updateStyleMapping(style.name,node.border.map)
border.width <- c(2,4,8)
node.border.width.map <- mapVisualProperty('node border width','mut_count','c',data.values,border.width)
updateStyleMapping(style.name,node.border.width.map)
top.mut <- (brc.mut$Hugo_Symbol)[tail(order(brc.mut$mut_count),2)]
top.mut
selectNodes(top.mut)
commandRun('diffusion diffuse')
createSubnetwork('selected')
renameNetwork('top mutated diffusion')
applyLayout('force-directed')
setCurrentNetwork("String Network - ovarian cancer")
clearSelection()
str(ovc.expr)  # gene names in row.names of data.frame
str(ovc.mut)  # gene names in column named 'Hugo_Symbol'
loadTableData(ovc.expr)
loadTableData(ovc.mut,'Hugo_Symbol')
applyStyle(style.name)
saveSession('tutorial_session') #.cys
saveSession(paste(getwd(),'tutorial_session',sep='/')) #.cys
#exportImage(paste(getwd(),'tutorial_image',sep='/'),'PDF') #.pdf
#?exportImage
##exportNetwork(paste(getwd(),'tutorial_network',sep='/'),'CYJS')  #.cyjs
##?exportNetwork
##exportStyle(paste(getwd(),'tutorial_style',sep='/'),'json') #.json; current style
##?exportStyle
help(package=r2cytoscape) # r2cytoscape helper functions
openCySwagger()  # CyREST API
openCySwagger("commands")  # CyREST Commands API
proc.time() - ptm
ptm <- proc.time()
library(pacman)
p_load(RJSONIO,igraph,httr,XML,RColorBrewer,r2cytoscape)
#port.number = 1234
#base.url = paste('http://localhost:',port.number,'/v1',sep="")
checkCytoscapeVersion()
if("string" %in% commandHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
if("diffusion" %in% commandHelp("")) print("Success: the Diffusion app is installed") else print("Warning: Diffusion app is not installed. Please install the Diffusion app before proceeding.")
applyStyle('default') # cleanse the palette before importing new networks and styles
string.cmd = 'string disease query disease="breast cancer" cutoff=0.9 species="Homo sapiens" limit=150'
string.query.url = command2query(string.cmd)
GET(string.query.url)
string.cmd = 'string disease query disease="ovarian cancer" cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
?commandRun
listNetworks()
applyLayout('circular')
commandHelp('layout')
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
commandHelp('layout force-directed')
listTableColumns('node')
disease.score.table <- getTableColumns('node','disease score')
disease.score.table
plot(factor(row.names(disease.score.table)),disease.score.table[,1], ylab=colnames(disease.score.table)[1])
summary(disease.score.table)
top.quart <- quantile(disease.score.table[,1], 0.75)
top.nodes <- row.names(disease.score.table)[which(disease.score.table[,1]>top.quart)]
createSubnetwork(top.nodes)
renameNetwork('top disease quartile')
createSubnetwork(edges='all')  #handy way to exclude unconnected nodes!
renameNetwork('top disease quartile connected')
setCurrentNetwork("String Network - ovarian cancer")
top.nodes <- row.names(disease.score.table)[tail(order(disease.score.table[,1]),3)]
selectNodes(top.nodes)
selectFirstNeighbors()
createSubnetwork('selected') # selected nodes, all connecting edges (default)
renameNetwork('top disease neighbors')
setCurrentNetwork("String Network - ovarian cancer")
selectNodes(top.nodes)
commandRun('diffusion diffuse') # diffusion!
createSubnetwork('selected')
applyLayout('force-directed')
renameNetwork('top disease diffusion')
load("data/tutorial-ovc-expr-mean-dataset.robj")
load("data/tutorial-ovc-mut-dataset.robj")
load("data/tutorial-brc-expr-mean-dataset.robj")
load("data/tutorial-brc-mut-dataset.robj")
str(brc.expr)  # gene names in row.names of data.frame
str(brc.mut)  # gene names in column named 'Hugo_Symbol'
setCurrentNetwork("String Network - breast cancer")
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
?loadTableData
loadTableData(brc.expr)  #default data.frame key is row.names
loadTableData(brc.mut,'Hugo_Symbol')  #specify column name if not default
style.name = "dataStyle"
defaults.list <- list(NODE_SHAPE="ellipse",
NODE_SIZE=60,
NODE_FILL_COLOR="#AAAAAA",
EDGE_TRANSPARENCY=120)
node.label.map <- mapVisualProperty('node label','name','p') # p for passthrough; nothing else needed
createStyle(style.name, defaults.list, list(node.label.map))
applyStyle(style.name)
brc.expr.network = getTableColumns('node','expr.mean')
min.brc.expr = min(brc.expr.network[,1],na.rm=TRUE)
max.brc.expr = max(brc.expr.network[,1],na.rm=TRUE)
data.values = c(min.brc.expr,0,max.brc.expr)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
node.fill.map <- mapVisualProperty('node fill color', 'expr.mean','c',data.values,node.colors)
updateStyleMapping(style.name, node.fill.map)
brc.mut.network = getTableColumns('node','mut_count')
min.brc.mut = min(brc.mut.network[,1],na.rm=TRUE)
max.brc.mut = max(brc.mut.network[,1],na.rm=TRUE)
data.values = c(min.brc.mut,20,max.brc.mut)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="seq")
border.colors <- c(brewer.pal(3, "Reds"))
node.border.map <- mapVisualProperty('node border paint','mut_count','c',data.values,border.colors)
updateStyleMapping(style.name,node.border.map)
border.width <- c(2,4,8)
node.border.width.map <- mapVisualProperty('node border width','mut_count','c',data.values,border.width)
updateStyleMapping(style.name,node.border.width.map)
top.mut <- (brc.mut$Hugo_Symbol)[tail(order(brc.mut$mut_count),2)]
top.mut
selectNodes(top.mut)
commandRun('diffusion diffuse')
createSubnetwork('selected')
renameNetwork('top mutated diffusion')
applyLayout('force-directed')
setCurrentNetwork("String Network - ovarian cancer")
clearSelection()
str(ovc.expr)  # gene names in row.names of data.frame
str(ovc.mut)  # gene names in column named 'Hugo_Symbol'
loadTableData(ovc.expr)
loadTableData(ovc.mut,'Hugo_Symbol')
applyStyle(style.name)
saveSession('tutorial_session') #.cys
saveSession(paste(getwd(),'tutorial_session',sep='/')) #.cys
#exportImage(paste(getwd(),'tutorial_image',sep='/'),'PDF') #.pdf
#?exportImage
##exportNetwork(paste(getwd(),'tutorial_network',sep='/'),'CYJS')  #.cyjs
##?exportNetwork
##exportStyle(paste(getwd(),'tutorial_style',sep='/'),'json') #.json; current style
##?exportStyle
help(package=r2cytoscape) # r2cytoscape helper functions
openCySwagger()  # CyREST API
openCySwagger("commands")  # CyREST Commands API
proc.time() - ptm
ptm <- proc.time()
library(pacman)
p_load(RJSONIO,igraph,httr,XML,RColorBrewer,r2cytoscape)
#port.number = 1234
#base.url = paste('http://localhost:',port.number,'/v1',sep="")
checkCytoscapeVersion()
if("string" %in% commandHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
if("diffusion" %in% commandHelp("")) print("Success: the Diffusion app is installed") else print("Warning: Diffusion app is not installed. Please install the Diffusion app before proceeding.")
applyStyle('default') # cleanse the palette before importing new networks and styles
string.cmd = 'string disease query disease="breast cancer" cutoff=0.9 species="Homo sapiens" limit=150'
string.query.url = command2query(string.cmd)
GET(string.query.url)
string.cmd = 'string disease query disease="ovarian cancer" cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
?commandRun
listNetworks()
applyLayout('circular')
commandHelp('layout')
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
commandHelp('layout force-directed')
listTableColumns('node')
disease.score.table <- getTableColumns('node','disease score')
disease.score.table
plot(factor(row.names(disease.score.table)),disease.score.table[,1], ylab=colnames(disease.score.table)[1])
summary(disease.score.table)
top.quart <- quantile(disease.score.table[,1], 0.75)
top.nodes <- row.names(disease.score.table)[which(disease.score.table[,1]>top.quart)]
createSubnetwork(top.nodes)
renameNetwork('top disease quartile')
createSubnetwork(edges='all')  #handy way to exclude unconnected nodes!
renameNetwork('top disease quartile connected')
setCurrentNetwork("String Network - ovarian cancer")
top.nodes <- row.names(disease.score.table)[tail(order(disease.score.table[,1]),3)]
selectNodes(top.nodes)
selectFirstNeighbors()
createSubnetwork('selected') # selected nodes, all connecting edges (default)
renameNetwork('top disease neighbors')
setCurrentNetwork("String Network - ovarian cancer")
selectNodes(top.nodes)
commandRun('diffusion diffuse') # diffusion!
createSubnetwork('selected')
applyLayout('force-directed')
renameNetwork('top disease diffusion')
load("data/tutorial-ovc-expr-mean-dataset.robj")
load("data/tutorial-ovc-mut-dataset.robj")
load("data/tutorial-brc-expr-mean-dataset.robj")
load("data/tutorial-brc-mut-dataset.robj")
str(brc.expr)  # gene names in row.names of data.frame
str(brc.mut)  # gene names in column named 'Hugo_Symbol'
setCurrentNetwork("String Network - breast cancer")
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
?loadTableData
loadTableData(brc.expr)  #default data.frame key is row.names
loadTableData(brc.mut,'Hugo_Symbol')  #specify column name if not default
style.name = "dataStyle"
defaults.list <- list(NODE_SHAPE="ellipse",
NODE_SIZE=60,
NODE_FILL_COLOR="#AAAAAA",
EDGE_TRANSPARENCY=120)
node.label.map <- mapVisualProperty('node label','name','p') # p for passthrough; nothing else needed
createStyle(style.name, defaults.list, list(node.label.map))
applyStyle(style.name)
brc.expr.network = getTableColumns('node','expr.mean')
min.brc.expr = min(brc.expr.network[,1],na.rm=TRUE)
max.brc.expr = max(brc.expr.network[,1],na.rm=TRUE)
data.values = c(min.brc.expr,0,max.brc.expr)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
node.fill.map <- mapVisualProperty('node fill color', 'expr.mean','c',data.values,node.colors)
updateStyleMapping(style.name, node.fill.map)
brc.mut.network = getTableColumns('node','mut_count')
min.brc.mut = min(brc.mut.network[,1],na.rm=TRUE)
max.brc.mut = max(brc.mut.network[,1],na.rm=TRUE)
data.values = c(min.brc.mut,20,max.brc.mut)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="seq")
border.colors <- c(brewer.pal(3, "Reds"))
node.border.map <- mapVisualProperty('node border paint','mut_count','c',data.values,border.colors)
updateStyleMapping(style.name,node.border.map)
border.width <- c(2,4,8)
node.border.width.map <- mapVisualProperty('node border width','mut_count','c',data.values,border.width)
updateStyleMapping(style.name,node.border.width.map)
top.mut <- (brc.mut$Hugo_Symbol)[tail(order(brc.mut$mut_count),2)]
top.mut
selectNodes(top.mut)
commandRun('diffusion diffuse')
createSubnetwork('selected')
renameNetwork('top mutated diffusion')
applyLayout('force-directed')
setCurrentNetwork("String Network - ovarian cancer")
clearSelection()
str(ovc.expr)  # gene names in row.names of data.frame
str(ovc.mut)  # gene names in column named 'Hugo_Symbol'
loadTableData(ovc.expr)
loadTableData(ovc.mut,'Hugo_Symbol')
applyStyle(style.name)
saveSession('tutorial_session') #.cys
saveSession(paste(getwd(),'tutorial_session',sep='/')) #.cys
#exportImage(paste(getwd(),'tutorial_image',sep='/'),'PDF') #.pdf
#?exportImage
##exportNetwork(paste(getwd(),'tutorial_network',sep='/'),'CYJS')  #.cyjs
##?exportNetwork
##exportStyle(paste(getwd(),'tutorial_style',sep='/'),'json') #.json; current style
##?exportStyle
help(package=r2cytoscape) # r2cytoscape helper functions
openCySwagger()  # CyREST API
openCySwagger("commands")  # CyREST Commands API
proc.time() - ptm
ptm <- proc.time()
library(pacman)
p_load(RJSONIO,igraph,httr,XML,RColorBrewer,r2cytoscape)
#port.number = 1234
#base.url = paste('http://localhost:',port.number,'/v1',sep="")
checkCytoscapeVersion()
if("string" %in% commandHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
if("diffusion" %in% commandHelp("")) print("Success: the Diffusion app is installed") else print("Warning: Diffusion app is not installed. Please install the Diffusion app before proceeding.")
applyStyle('default') # cleanse the palette before importing new networks and styles
string.cmd = 'string disease query disease="breast cancer" cutoff=0.9 species="Homo sapiens" limit=150'
string.query.url = command2query(string.cmd)
GET(string.query.url)
string.cmd = 'string disease query disease="ovarian cancer" cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
?commandRun
listNetworks()
applyLayout('circular')
commandHelp('layout')
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
commandHelp('layout force-directed')
listTableColumns('node')
disease.score.table <- getTableColumns('node','disease score')
disease.score.table
plot(factor(row.names(disease.score.table)),disease.score.table[,1], ylab=colnames(disease.score.table)[1])
summary(disease.score.table)
top.quart <- quantile(disease.score.table[,1], 0.75)
top.nodes <- row.names(disease.score.table)[which(disease.score.table[,1]>top.quart)]
createSubnetwork(top.nodes)
renameNetwork('top disease quartile')
createSubnetwork(edges='all')  #handy way to exclude unconnected nodes!
renameNetwork('top disease quartile connected')
setCurrentNetwork("String Network - ovarian cancer")
top.nodes <- row.names(disease.score.table)[tail(order(disease.score.table[,1]),3)]
selectNodes(top.nodes)
selectFirstNeighbors()
createSubnetwork('selected') # selected nodes, all connecting edges (default)
renameNetwork('top disease neighbors')
setCurrentNetwork("String Network - ovarian cancer")
selectNodes(top.nodes)
commandRun('diffusion diffuse') # diffusion!
createSubnetwork('selected')
applyLayout('force-directed')
renameNetwork('top disease diffusion')
load("data/tutorial-ovc-expr-mean-dataset.robj")
load("data/tutorial-ovc-mut-dataset.robj")
load("data/tutorial-brc-expr-mean-dataset.robj")
load("data/tutorial-brc-mut-dataset.robj")
str(brc.expr)  # gene names in row.names of data.frame
str(brc.mut)  # gene names in column named 'Hugo_Symbol'
setCurrentNetwork("String Network - breast cancer")
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
?loadTableData
loadTableData(brc.expr)  #default data.frame key is row.names
loadTableData(brc.mut,'Hugo_Symbol')  #specify column name if not default
style.name = "dataStyle"
defaults.list <- list(NODE_SHAPE="ellipse",
NODE_SIZE=60,
NODE_FILL_COLOR="#AAAAAA",
EDGE_TRANSPARENCY=120)
node.label.map <- mapVisualProperty('node label','name','p') # p for passthrough; nothing else needed
createStyle(style.name, defaults.list, list(node.label.map))
applyStyle(style.name)
brc.expr.network = getTableColumns('node','expr.mean')
min.brc.expr = min(brc.expr.network[,1],na.rm=TRUE)
max.brc.expr = max(brc.expr.network[,1],na.rm=TRUE)
data.values = c(min.brc.expr,0,max.brc.expr)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
node.fill.map <- mapVisualProperty('node fill color', 'expr.mean','c',data.values,node.colors)
updateStyleMapping(style.name, node.fill.map)
brc.mut.network = getTableColumns('node','mut_count')
min.brc.mut = min(brc.mut.network[,1],na.rm=TRUE)
max.brc.mut = max(brc.mut.network[,1],na.rm=TRUE)
data.values = c(min.brc.mut,20,max.brc.mut)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="seq")
border.colors <- c(brewer.pal(3, "Reds"))
node.border.map <- mapVisualProperty('node border paint','mut_count','c',data.values,border.colors)
updateStyleMapping(style.name,node.border.map)
border.width <- c(2,4,8)
node.border.width.map <- mapVisualProperty('node border width','mut_count','c',data.values,border.width)
updateStyleMapping(style.name,node.border.width.map)
top.mut <- (brc.mut$Hugo_Symbol)[tail(order(brc.mut$mut_count),2)]
top.mut
selectNodes(top.mut)
commandRun('diffusion diffuse')
createSubnetwork('selected')
renameNetwork('top mutated diffusion')
applyLayout('force-directed')
setCurrentNetwork("String Network - ovarian cancer")
clearSelection()
str(ovc.expr)  # gene names in row.names of data.frame
str(ovc.mut)  # gene names in column named 'Hugo_Symbol'
loadTableData(ovc.expr)
loadTableData(ovc.mut,'Hugo_Symbol')
applyStyle(style.name)
saveSession('tutorial_session') #.cys
saveSession(paste(getwd(),'tutorial_session',sep='/')) #.cys
#exportImage(paste(getwd(),'tutorial_image',sep='/'),'PDF') #.pdf
#?exportImage
##exportNetwork(paste(getwd(),'tutorial_network',sep='/'),'CYJS')  #.cyjs
##?exportNetwork
##exportStyle(paste(getwd(),'tutorial_style',sep='/'),'json') #.json; current style
##?exportStyle
help(package=r2cytoscape) # r2cytoscape helper functions
openCySwagger()  # CyREST API
openCySwagger("commands")  # CyREST Commands API
proc.time() - ptm
ptm <- proc.time()
library(pacman)
p_load(RJSONIO,igraph,httr,XML,RColorBrewer,r2cytoscape)
#port.number = 1234
#base.url = paste('http://localhost:',port.number,'/v1',sep="")
checkCytoscapeVersion()
if("string" %in% commandHelp("")) print("Success: the STRING app is installed") else print("Warning: STRING app is not installed. Please install the STRING app before proceeding.")
if("diffusion" %in% commandHelp("")) print("Success: the Diffusion app is installed") else print("Warning: Diffusion app is not installed. Please install the Diffusion app before proceeding.")
applyStyle('default') # cleanse the palette before importing new networks and styles
string.cmd = 'string disease query disease="breast cancer" cutoff=0.9 species="Homo sapiens" limit=150'
string.query.url = command2query(string.cmd)
GET(string.query.url)
string.cmd = 'string disease query disease="ovarian cancer" cutoff=0.9 species="Homo sapiens" limit=150'
commandRun(string.cmd)
?commandRun
listNetworks()
applyLayout('circular')
commandHelp('layout')
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
commandHelp('layout force-directed')
listTableColumns('node')
disease.score.table <- getTableColumns('node','disease score')
disease.score.table
plot(factor(row.names(disease.score.table)),disease.score.table[,1], ylab=colnames(disease.score.table)[1])
summary(disease.score.table)
top.quart <- quantile(disease.score.table[,1], 0.75)
top.nodes <- row.names(disease.score.table)[which(disease.score.table[,1]>top.quart)]
createSubnetwork(top.nodes)
renameNetwork('top disease quartile')
createSubnetwork(edges='all')  #handy way to exclude unconnected nodes!
renameNetwork('top disease quartile connected')
setCurrentNetwork("String Network - ovarian cancer")
top.nodes <- row.names(disease.score.table)[tail(order(disease.score.table[,1]),3)]
selectNodes(top.nodes)
selectFirstNeighbors()
createSubnetwork('selected') # selected nodes, all connecting edges (default)
renameNetwork('top disease neighbors')
setCurrentNetwork("String Network - ovarian cancer")
selectNodes(top.nodes)
commandRun('diffusion diffuse') # diffusion!
createSubnetwork('selected')
applyLayout('force-directed')
renameNetwork('top disease diffusion')
load("data/tutorial-ovc-expr-mean-dataset.robj")
load("data/tutorial-ovc-mut-dataset.robj")
load("data/tutorial-brc-expr-mean-dataset.robj")
load("data/tutorial-brc-mut-dataset.robj")
str(brc.expr)  # gene names in row.names of data.frame
str(brc.mut)  # gene names in column named 'Hugo_Symbol'
setCurrentNetwork("String Network - breast cancer")
applyLayout('force-directed defaultSpringCoefficient=.000004 defaultSpringLength=100')
?loadTableData
loadTableData(brc.expr)  #default data.frame key is row.names
loadTableData(brc.mut,'Hugo_Symbol')  #specify column name if not default
style.name = "dataStyle"
defaults.list <- list(NODE_SHAPE="ellipse",
NODE_SIZE=60,
NODE_FILL_COLOR="#AAAAAA",
EDGE_TRANSPARENCY=120)
node.label.map <- mapVisualProperty('node label','name','p') # p for passthrough; nothing else needed
createStyle(style.name, defaults.list, list(node.label.map))
applyStyle(style.name)
brc.expr.network = getTableColumns('node','expr.mean')
min.brc.expr = min(brc.expr.network[,1],na.rm=TRUE)
max.brc.expr = max(brc.expr.network[,1],na.rm=TRUE)
data.values = c(min.brc.expr,0,max.brc.expr)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="div") # div,qual,seq,all
node.colors <- c(rev(brewer.pal(length(data.values), "RdBu")))
node.fill.map <- mapVisualProperty('node fill color', 'expr.mean','c',data.values,node.colors)
updateStyleMapping(style.name, node.fill.map)
brc.mut.network = getTableColumns('node','mut_count')
min.brc.mut = min(brc.mut.network[,1],na.rm=TRUE)
max.brc.mut = max(brc.mut.network[,1],na.rm=TRUE)
data.values = c(min.brc.mut,20,max.brc.mut)
display.brewer.all(length(data.values), colorblindFriendly=TRUE, type="seq")
border.colors <- c(brewer.pal(3, "Reds"))
node.border.map <- mapVisualProperty('node border paint','mut_count','c',data.values,border.colors)
updateStyleMapping(style.name,node.border.map)
border.width <- c(2,4,8)
node.border.width.map <- mapVisualProperty('node border width','mut_count','c',data.values,border.width)
updateStyleMapping(style.name,node.border.width.map)
top.mut <- (brc.mut$Hugo_Symbol)[tail(order(brc.mut$mut_count),2)]
top.mut
selectNodes(top.mut)
commandRun('diffusion diffuse')
createSubnetwork('selected')
renameNetwork('top mutated diffusion')
applyLayout('force-directed')
setCurrentNetwork("String Network - ovarian cancer")
clearSelection()
str(ovc.expr)  # gene names in row.names of data.frame
str(ovc.mut)  # gene names in column named 'Hugo_Symbol'
loadTableData(ovc.expr)
loadTableData(ovc.mut,'Hugo_Symbol')
applyStyle(style.name)
saveSession('tutorial_session') #.cys
saveSession(paste(getwd(),'tutorial_session',sep='/')) #.cys
#exportImage(paste(getwd(),'tutorial_image',sep='/'),'PDF') #.pdf
#?exportImage
##exportNetwork(paste(getwd(),'tutorial_network',sep='/'),'CYJS')  #.cyjs
##?exportNetwork
##exportStyle(paste(getwd(),'tutorial_style',sep='/'),'json') #.json; current style
##?exportStyle
help(package=r2cytoscape) # r2cytoscape helper functions
openCySwagger()  # CyREST API
openCySwagger("commands")  # CyREST Commands API
proc.time() - ptm
